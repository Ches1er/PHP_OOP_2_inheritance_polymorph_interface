
        /////////  Наследование /////////

Есть класс А:
class A{
    public function dosomething(){
        echo "do someth";
    }
}
Для создания класса В, который может делать то же самое, что и класс А, можно было
бы скопировать метод в этот класс.
Используя наследование, можно сделать след образом:
class B extends A{
    public function doanother(){
        echo "do another";
    }
}
В результате создав экземпляр класса В.
$b = new B();
Мы можем вызывать как метод doanother(), так и dosomething().
Что касаемо приватных и протектед свойств. Если мы в родительском классе создадим
приватное свойство, например $f, то к нему мы сможем обратиться только в этом классе
В классе В обратиться к $f мы уже не сможем. Чтоб мы могли использовать это св-во
не объявляя его в классе В снова, необходимо использовать protected, тогда мы
можем использовать св-во указанное в родителе и в потомке. При этмо снаружи мы
все также к нему достучаться не сможем.
Но это не самая удачная практика, т.к. мы сможем достучаться к этому св-ву через
геттер или сеттер родителя.
Удобно ипользовать протектед методы, для того, если мы хотим наследовать какие-то
методы родителя в нескольких потомках, но не хотим, чтоб эти методы были видны снаружи.

     /////////  Переопределение или overwriting /////////

При наследовании можно использовать перенаследование методов. Т.е. переписать родит
метод как нам необходимо его видеть в потомке. Но возникают моменты, когда необходимо
при переопределении достучаться до методов родительского класса. Например мы перезаписали
метод dosomething:
class B extends A{
    public function doanother(){
        echo "do another";
    }
    public function dosomething(){
        parent::dosomething() //родительский  метод.
        echo "!!!";
    }
}
И для вызова одноименного родительского метода можно использовать конструкцию:
parent::dosomething().

Переопределение доступно не только для методов, но и для конструкторов.

      /////////  Полиморфизм  ////////////

У нас есть функция, которая принимает экземпляр класса А:
function f(А $a){
 $a->dosomething();
}

$x = new A(10);
f($x) - отработает функция, вызовет нам свойство экземпляра объекта, все впорядке.
Но, если сделать:
$y = new B(10);
Полиморфизм гласит, что наследник может заменить родителя, но вести себя будет
по-своему!
Теперь меняем:
$x = new B(10);
Снова отрабатываем функцию
f($x);
И она сработает, но уже с методом, который заимствован от класса В, хотя в ф-ции
у нас указан аргументом экземпляр класса А.
За счет принципа полиморфизма работает большинство паттернов современного программирования.

         /////////  Абстрактные классы /////////


Существуют специальные виды классов, которые подразуметвают под собой, что от них
будут наследоваться, т.н. абстрактные классы. Создать их экземпляр невозможно.

abstract class A{
    public function doA(){
        echo "DO A";
    }
    public abstract function doA();
}

Если попытаться создать экземпляр абстрактного класса, то появится ошибка.
class B extends A{
    Здесь нам необходимо будет обящательно реализовать абстрактные методы, если
    они существуют!!!
}
$b = new B;
$b->doA(); - это сработает;
Абстрактные классы могут содержать абстрактные методы.
Но тогда в потомке абстрактного класса необходимо этот метод реализовать.
Класс В у нас будет подсвечен ошибкой, нажимаем Алт+Энтер->Add method stubs и выбираем
метод, которые необходимо реализовать.
Здесь также, как и в примере выше мы можем создать ф-цию, которая будет принимать
в виде аргумента экземпляр объекта класса A, а потом в реализации пробросить
экземпляр объекта класса В, то это сработает из-за принципа полиморфизма!

         /////////  Интерфейс /////////


Класс в котором ни один метод не реализован и нет ни одного поля!
interface IA{
    function doIA; //не указывает public, т.к. интерфейс поразумевает, что у него
    все методы будут публичными
}
Cоздаем класс на основе интерфейса.
Интерфейсы не наследуют, их реализуют, ключевое слово implements.
class fromIA implements IA{
    "Реализовать интерфейс" - означает реализовать все методы, описанные в нем.
}

Здесь также, как и в примере выше мы можем создать ф-цию, которая будет принимать
в виде аргумента экземпляр использующий интерфейс IA, а уже туда пробрасывать экземпляры
объектов, которые основаны на данном интерфейсе. Т.к. мы обязательно должны
реализовать определенный набор методов, то в данной ф-ции мы уже можем эти методы
вызывать, т.к. они 100% будут в нашем экземпляре класса, который попадет в кач-ве
аргумента ф-ции.

Важным факто является то, что один и тот же класс может реализовывать множество
интерфейсов.(указываются через ","). При этом никто не запрещает наследоваться от
какого-либо другого класса, например это будет выглядеть так:
class fromIA extends fromIB implements IA,IB{}
Если родительский класс реализует какой-либо интерфейс, то и наследник тоже по-умолчанию
будет его реализовывать, т.к. он наследует методы, реализованные у родителя.

         /////////  Магические методы /////////

Когда мы описываем любой класс, нажимаем стрл+О, нам вываливается масса методов, которые
можно переопределить, эти методы явно никто никогда не вызывает, поэтому они
называются магическими. Например констракт вызывается при создании экземпляра
объекта, его нельзя вызвать напрямую.
__callStatic - вызывается тогда, когда мы вызываем несуществующий статический метод.
Реализация:
class X{
    public static function __callStatic($name,$arguments){
        echo "Call $name";
    }
}
Теперь при вызове несуществующего статического метода X::ff(), у нас не появится ошибка,
а просто будет написано, "Call ff".
__call- вызывается тогда, когда мы вызываем несуществующий метод, работает также, как и
__callStatic.
Метод __invoke. Срабатывает тогда, когда мы пытаемся вызвать объект как функцию.
$X() - вот в таком вот случае. В данном случае мы можем в методе инвок реалиовать любой
функционал.
__get,__set,_unset,__isset - вызываются при обращении к несуществующим св-вам. Соотв.
сет вызывается, когда мы пытаемся в св-во записать значение, гет когда получить, иссет
возвращает тру-фолс, проверяет существование св-ва, ансет при удалении несуществ. св-ва.
__debuginfo вызывается когда мы пытаемся получить список свойств объекта, через вардамп.
Если мы попытаемся напрямую через вардамп посмотреть объект, то нам покажут все св-ва
как паблик, так и прайвет и протектед, а __debuginfo покажет только то, что мы ему прикажем
показать!
__sleep, __wakeup слип вызывается когда мы пытаемся объект сериализовать, а вейкап после
сериализации.
__toString - метод который представляет объект в строковой форме. Вызывается, когда мы
пытаемся сделать например echo "a". Удобно для отладки, т.к. можно написать короткую
информацию об классе, какие у него св-ва и методы и пр.

            /////////  Trait  /////////

Реализует что-либо, содержит методы, экземляр его создать нельзя. Но их можно использовать
в классах.
trait Hello{
    public function x(){
        echo "Hello";
    }
}
Далее подставляем в класс.
class Y{
    use Hello;
}
Не наследуется, не имплементируется, не перегружаются методы, а просто
копируется все внутрь класса. Потом приватные методы трейта можно использовать
внутри класса.
Используется когда необходимо описать какие то поля и использовать их внутри интерфейса,
но в интерфейсе этого сделать неполучится в трейте можно.
Также трейты не забирают возможность наследоваться от чего либо другого.

         /////////  Пространство имен  /////////

namespace Hello; - именованная область видимости. После того, как мы его написали,
распространяется на весь файл.
Для того, чтобы использовать класс из пространства имени, подключив файл с этим пространством
необходимо наисать $x = new Hello/X;
Какую проблему решает пространство имен? Одинаковое имя классов. Подключаются несколько
библиотек, и в них могут быть классы с одинаковым именем, но разным функционалом,
в этом случае нам на помощь и приходит пространство имен.
Для того, чтобы не писать много раз название класса типа Hello\X существуюет директива:
use Hello\X и потом везде писать просто X, или дать псевдоним use Hello\X as Y, в таком
случае дальше мы сможем везде использовать псевдоним.

        /////////  Автозагрузка на основе namespace  /////////

Когда создаем экземпляр класса и он самостоятельно подключается.
Создаем отдельную папку, создаем класс с неймспейсом.
Идем в рабочий файл и пишем: spl_autoload_register(function($classname){
    $classpath = str_replace("\\","/", $classname).".php";
    if (file_exists($classpath)){
        include $classpath;
    }
})
$x = new hello/Hello;
Работает это след образом, PHP когда не может найти класс, вызывает функцию, зарегистр
в автозагрузке. Объект у нас получает название класса полностью т.е. namespace/Class.
Далее ф-ция меняет в названии слеш на обратный, чтоб получить адрес,
и получает путь к классу.